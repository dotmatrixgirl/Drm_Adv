script, encounter, who, begin
	variable (parent, textSli, hpSli, condition, state, turn, i, j)
	variable (target, slot, textWait, lastTurn, sel, ani, arrow)
	variable (atbRose, atbKat, atbEnemy, maxAtb, mood, question)
	initEncounter()
	while (true) do (
		if (updateEncounter()==true) then (break)
		specwait
	)
	endEncounter()

	subscript, updateEncounter, begin
		if (textWait) then (
			if (newpresskey(b:a) || newpresskey(b:b)) then (
				textWait := false
				updateHP()
				if (state == encounter:choose) then (
					changeState(encounter:choose)
				)
			)
			exitScript
		) else if (
			condition==encounter:won || condition==encounter:lost || condition==encounter:ran || condition==encounter:talked
		) then (
			exitReturning(true)
		)
		
		if (sound is playing (0)) then (
			exitScript
		)
		
		if (turn == -1) then (
			atbRose += getStat(char:rose, stat:speed) * 8 / 40
			atbKat += getStat(char:kat, stat:speed) * 8 / 40
			atbEnemy += getStat(char:enemy, stat:speed) * 8 / 40
			show values (maxAtb, atbRose, atbKat, atbEnemy)
			if (atbRose > maxAtb) then (
				freeSliceChildren(textSli)
				atbRose := 0
				turn := char:rose
				setStat(turn, stat:defending, false)
				setSliceVisible(textSli, true)
				question := random (1, questions)
				changeState(encounter:choose)
				
			) else if (atbKat > maxAtb) then (
				freeSliceChildren(textSli)
				atbKat := 0
				turn := char:kat
				setStat(turn, stat:defending, false)
				setSliceVisible(textSli, true)
				question := random (1, questions)
				changeState(encounter:choose)
				
				
			) else if (atbEnemy > maxAtb) then (
				atbEnemy := char:enemy
				turn := atbEnemy
				setStat(turn, stat:defending, false)  
				setSliceVisible(textSli, true)
				freeSliceChildren(textSli)
			)
		)
		if (state == encounter:between) then (updateTurn, exitScript)
		if (turn == turn:enemy) then (
			enemyTurn
		) else if (turn==char:rose || turn==char:kat) then (	
			switch (state) do (
				case (encounter:choose) do (
					if (newpresskey(b:u)) then (
						if (sel<=1) then (
							sel := childCount(textSli) -- 1
						) else (sel -= 1)
					)
					if (newpresskey(b:d)) then (
						if (sel>= childCount(textSli) -- 1) then (
							sel := 1
						) else (sel += 1)
					) else if (newpresskey(b:a)) then (
						if (sel<>childCount(textSli) -- 1) then (
							if (turn==char:rose) then (
								sel:ActionRose := sel
							) else (
								sel:ActionKat := sel
							)
						)
						switch(sel) do (
							case (1) do (
								if (condition == encounter:peaceful) then (
									changeState(encounter:talk)
								) else (
									setSliceVisible(arrow, false)
									freeSliceChildren (TextSli)
									$10="They are too angry to talk."
									textLine(textSli, 0, true)
									state := encounter:choose
									textWait:= true
								)
							)
							case (2) do (
								if (getPinId(turn, slot:atk1) && getPinId(turn, slot:atk2) ) then (
									freeSliceChildren (TextSli)
									$10="No equipped pins"
									textLine(textSli, 0, true)
									state := encounter:choose
									textWait:= true
								) else (
									changeState(encounter:skill)
								)
							)
							case (3) do (
								setSliceVisible(arrow)
								freeSliceChildren (TextSli)
								copyString(10, turn+strng:roseName)
								$10+" defends."
								textLine(textSli, 0, true)
								setStat(turn, stat:defending, true)
								textWait:= true
								state := encounter:between
							)
							case (4) do (
								changeState(encounter:run)
							)
						)
					)
				)
				case (encounter:talk) do (
					if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					) else if (newpresskey(b:u)) then (
						if (sel<=1) then (
							sel := childCount(textSli) -- 1
						) else (sel -= 1)
					) else if (newpresskey(b:d)) then (
						if (sel>=childCount(textSli) -- 1) then (
							sel := 1
						) else (sel += 1)
					) else if (newpresskey(b:a)) then (
						setSliceVisible(arrow, false)
						answer(sel)
					)
				)
				case (encounter:run) do (
					if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					) else if (newpresskey(b:u)) then (
						if (sel<=1) then (
							sel := childCount(textSli) -- 1
						) else (sel -= 1)
					) else if (newpresskey(b:d)) then (
						if (sel>=childCount(textSli) -- 1) then (
							sel := 1
						) else (sel += 1)
					) else if (newpresskey(b:a)) then (
						switch(sel) do (
							case (1) do (
								condition := encounter:ran
							)
							case (2) do (
								changeState(encounter:choose)
							)
						)
					)
				)
				case (encounter:skill) do (
					if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					) else if (newpresskey(b:a)) then (
						if (getPinId(turn, slot:atk1) <> pin:dummy) then (
							if (sel == 1) then (
								slot := slot:atk1
							) else if (sel == 2) then (
								slot := slot:atk2
							)
						) else (
							if (sel == 1) then (
								slot := slot:atk2
							)
						)
						if (getTargets()==target:enemy) then (
							$10+"${S3}."
							textline(textsli, 0, true)
							target := char:enemy
							usePin(turn, target, slot)
							animations()
							textline(textsli, 2, true)
							textWait:= true
							if (getPinId(turn, slot) >=pin:flame && getPinId(turn, slot) <= pin:shock) then (
								condition := encounter:enraged
								ani := ani:playerAttack
								state := encounter:between
							)
						) else (changeState(encounter:target))					
					) else if (newpresskey(b:u)) then (
						if (sel<=1) then (
							sel := childCount(textSli) -- 1
						) else (sel -= 1)
					) else if (newpresskey(b:d)) then (
						if (sel>=childCount(textSli) -- 1) then (
							sel := 1
						) else (sel += 1)
					)
				)
				case (encounter:target) do (
					if (newpresskey(b:b)) then (
						changeState(encounter:skill)
					) else if (newpresskey(b:a)) then (
						setSliceVisible(arrow, false)
						freeSliceChildren (TextSli)
						getPinName(getPinId(turn, slot))
						if (turn == char:rose) then (
							$10="${S1} used ${S11} on "
						) else if (turn == char:kat) then (
							$10="${S2} used ${S11} on "
						)
						if (getTargets()==target:party) then (
							switch (sel) do (
								case (1) do ($10+"${S1}.", target := char:rose)
								case (2) do ($10+"${S2}.", target := char:kat)
							)
							textLine(textSli, 0, true)
							usePin(turn, target, slot)
							animations()
							textline(textsli, 2, true)
							textWait := true
							state := encounter:between
						) else if (getTargets()==target:all) then (
							switch (sel) do (
								case (1) do ($10+"${S1}.", target := char:rose)
								case (2) do ($10+"${S2}.", target := char:kat)
								case (3) do ($10+"${S3}.", target := char:enemy)
							)
							textLine(textSli, 0, true)
							usePin(turn, target, slot)
							animations()
							textline(textsli, 2, true)
							
							textWait := true
							state := encounter:between
						)
					) else if (newpresskey(b:u)) then (
						if (sel<=1) then (
							sel := childCount(textSli) -- 1
						) else (sel -= 1)
					) else if (newpresskey(b:d)) then (
						if (sel>=childCount(textSli) -- 1) then (
							sel := 1
						) else (sel += 1)
					)
				)
			)
		)
		setSliceY(arrow, 107 -- 12 + sel * 12 )
	end

	subscript, animations, begin
		variable (sli)
		setSliceVisible(arrow, false)
		for (j, 0, 12) do (specwait)
		sli := lastChild(parent)
		switch (getPinId(turn, slot)) do (
			case (pin:heart) do (
				setParent(loadAttackSprite(1), sli)
			)
			case (pin:flame) do (
				setParent(loadAttackSprite(2), sli)
			)
			else (setParent(loadAttackSprite(0), sli))
		)
		sli := lastChild(sli)
		sliceToFront(sli)
		for (i, 0, 2) do (
			setSpriteFrame(sli, i)
			for (j, 0, 4) do (specwait)
		)
		freeSlice(sli)
		for (j, 0, 12) do (specwait)

		if (turn<>char:enemy) then (
			sli := firstChild(sliceChild(parent, 1))
		) else(
			sli := lastChild(parent)
		)
		if (getPinId(turn, slot) >=pin:flame && getPinId(turn, slot) <= pin:shock) then (
			for (i, 4, 0, -1) do (
				put slice (sli, -1 * i, 0)
				for (j, 0, 2) do (specwait)
				put slice (sli, i, 0)
				for (j, 0, 2) do (specwait)
			)
			put slice (parent, 0, 0)
		)
		return (true)
	end

	subscript, updateTurn, begin
		turn := -1
		setSliceVisible(textSli)
		updateHP
		state := encounter:choose
	end

	subscript, enemyTurn, begin
		variable (slot, target)
		setSliceVisible(arrow, false)
		setSliceVisible(textSli, true)
		state := encounter:choose
		if (condition == encounter:enraged) then (
			slot := random (1, 100)
			if (slot > 75) then (
				slot := slot:atk1
			) else (
				slot := slot:atk2
			)
			switch (getTargets()) do (
				case (target:enemy) do (
					target := random(char:Rose, char:Kat)	
				)
				case (target:party) do (
					target := char:enemy
				)
				case (target:all) do (
					target := random(char:Rose, char:enemy)
				)
			)
			freeSliceChildren (TextSli)

			getPinName(getPinId(turn, slot))
			$10="${S3} used ${S11} on "
			switch (target) do (
				case (char:rose) do (
					$10+"${S1}"
				)
				case (char:kat) do (
					$10+"${S2}"
				)
				case (char:enemy) do (
					$10+"${S3}"
				)
			)

			expandString(10)
			textLine(textSli, 0, true)
			usePin(turn, target, slot)
			animations()
			
			textLine(textSli, 2, true)
			textWait := true
			state := encounter:between
		) else if (condition == encounter:peaceful) then (
			freeSliceChildren(textSli)
			$10="They seem to be waiting."
			textLine(textSli, 0, true)
			textWait := true
			state := encounter:between
		)
	end

	subscript, changeState, which, begin
		setSliceVisible(arrow, false)
		switch (which) do (
			case (encounter:choose) do (
				freeSliceChildren (TextSli)

				if (turn==char:rose) then (
					$10="What will ${S1} do?"
					sel := sel:ActionRose
				) else (
					$10="What will ${S2} do?"
					sel := sel:ActionKat
				)
				
				textLine(textSli, 0, true)

				$10="Talk"
				textLine(textSli, 2)
				$10="Pins"
				textLine(textSli, 3)
				$10="Defend"
				textLine(textSli, 4)
				$10="Run"
				textLine(textSli, 5)
				setSliceVisible(arrow, true)
			)
			case (encounter:run) do (
				freeSliceChildren(TextSli)
				$10="Run Away?"
				textLine(textSli, 0, true)
				$10="Yes"
				textLine(textSli, 2)
				$10="No"
				textLine(textSli, 3)
				sel := 1
				setSliceVisible(arrow, true)
			)
			case (encounter:talk) do (
				freeSliceChildren (textSli)
				initDialogue(textSli, question)
				setSliceVisible(arrow, true)
			)
			case (encounter:skill) do (
				freeSliceChildren (textSli)
				initSkill()
				setSliceVisible(arrow, true)
			) case (encounter:target) do (
				initTarget()
				setSliceVisible(arrow, true)
			)
			else (
				freeSliceChildren (textSli)
			)
		)
		state := which
	end

	subscript, updateHP, begin

		for (i, 0, 2) do (
			$10=""
			appendNumber (10, getStat(i, stat:currentlife))
			setSliceText(sliceChild(hpSli, i), 10)
			if (i==char:enemy && getStat(i, stat:currentlife) == 0) then (
				condition := encounter:won
			)
		)
	end

	subscript, initSkill, begin
		$10="Choose Pin"
		textLine(textSli, 0, true)

		if (getPinId(turn, slot:atk1)<>false) then (
			getPinName(getPinId(turn, slot:atk1))
			$10="${S11} lvl "
			appendNumber(10, getPinLvl(turn, slot:atk1))
			textLine(textSli, 2)
		)
		if (getPinId(turn, slot:atk2)<>false) then (
			getPinName(getPinId(turn, slot:atk2))
			$10="${S11} lvl "
			appendNumber(10, getPinLvl(turn, slot:atk2))
			if (getPinId(turn, slot:atk1)==false) then (
				textLine(textSli, 2)
			) else (textLine(textSli, 3))
		)
		sel := 1
	end

	subscript, initTarget, begin
		freeSliceChildren(textSli)
		getPinName(getPinId(turn, slot:atk1)) 
		$10="Choose who to use ${S11} on."
		
		switch (getTargets()) do (
			case (target:party) do (
				textLine(textSli, 0, true)
				$10="${S1}"
				expandString(10)
				textLine(textSli, 2)
				$10="${S2}"
				expandString(10)
				textLine(textSli, 3)
			)
			case (target:all) do (
				textLine(textSli, 0, true)
				$10="${S1}"
				expandString(10)
				textLine(textSli, 2)
				$10="${S2}"
				expandString(10)
				textLine(textSli, 3)
				$10="${S3}"
				expandString(10)
				textLine(textSli, 4)	
			)
			case (target:enemy) do (
				$10="Use ${S11} on ${S3}?"
				expandString(10)
				textLine(textSli, 0, true)
				$10="Yes"
				textLine(textSli, 2)
				$10="No"
				textLine(textSli, 3)
			)
		)
		sel := 1
	end

	subscript, getTargets, begin
		if (getPinId(turn, slot) == pin:heart) then (
			return (target:party)
		) else if (getPinId(turn, slot) >= pin:addFlame && getPinId(turn, slot) <= pin:addEarth) then (
			return (target:all)
		) else (
			return (target:enemy)
		)
	end

	subscript, answer, which, begin
		
		if (sliceChild(textSli, which)==false) then (exitScript)
		switch (getExtra(sliceChild(textSli, which), getStat(char:enemy, stat:personality))) do (
			case (none) do (
				$10="Neither liked nor disliked."
		 	)
		 	case (liked) do (
		 		mood += 10
		 		$10="Liked."
		 		statGain(turn, gain:talked)
		 	)
		 	case (disliked) do (
		 		mood -= 10
		 		$10="Disliked."
		 		statGain(turn, gain:failtalk)
		 	)
		)
		if (mood >= getStat(char:enemy, stat:will)) then (
			condition := encounter:talked
			$10="They no longer wish to fight."
		) else if (mood <= getStat(char:enemy, stat:will) * -1) then (
			$10="They became enraged."
			condition := encounter:enraged
		)
		freeSliceChildren(textSli)

		textLine(textSli, 0, true)
		textWait := true
		state := encounter:between
	end

	subscript, initEncounter, begin
		#playSong(song:home bittersweet home)
		condition := encounter:peaceful
		turn := -1
		parent := loadSliceCollection (1)
		game:state := state:encounter

		textSli := sliceChild(firstChild(parent), 1)

		arrow := sliceChild(firstChild(parent), 2)

		hpSli :=  lastChild(firstChild(parent))

		who := enemy:dummy
		loadbattleback(parent, who)

		initEnemy(who)


		for (i, char:rose, char:enemy) do (
			setStat(i, stat:currentlife, getStat(i, stat:life))
			updateStats(who, true)
			setStat(who, stat:atr, getPinID(who, slot:atr) + 1 -- pin:flameAtr)
		)
		updateHP()
		mood := getStat(char:enemy, stat:mood)
		maxAtb := getStat(char:rose, stat:speed) + getStat(char:kat, stat:speed) + getStat(char:enemy, stat:speed)

		maxAtb := maxAtb * 20

		atbRose := random(0, maxAtb)
		atbKat := random(0, maxAtb)
		atbEnemy := random(0, maxAtb)
	end

	subscript, endEncounter, begin
		stop song
		statGain(char:Rose, gain:battled)
		statGain(char:Kat, gain:battled)

		afterEncounter(condition, parent)
	end
end

script, afterEncounter, condition, parent, begin
	variable(sli, stat, exiter, textWait, who, levelIsCapped, pin, i, state)
	state := -1
	init()
	while (true) do (
		if (update) then (break)
		wait
	)
	freeSlice(sli)

	subscript, init, begin
		game:state := state:resume
		freeSlice(lastChild(parent))
		freeBattleBack()
		specwait(44)
		freeSlice(parent)
		conditionInit()
	end

	subscript, update, begin
		switch(state) do (
			case (0) do (updateCapCheck)
			case (1) do (statUpdate)
			case (2) do (pinUpdate)
			else (return (true))
		)
	end

	subscript, statUpdate, begin
		if (who > char:Kat) then (
			pinInit()
		) else if (getLvl(who) >= getCap) then (
			copyString(10, who+strng:roseName)
			$10+" has reached the level cap."
			expandString(10)
			write(-1)
			who += 1
			textWait := true
		) else (
			if (updateStat(who, stat, false)) then (
				copyString(10, who+strng:RoseName)

				$10+"'s "

				concatenateStrings (10, stat + strng:life -- stat:life)

				$10+" grew to "

				appendNumber(10, getStat(who, stat))

				$10+"."

				expandString(10)
				write(-1)
			) else (
				if (who > char:Kat) then (
					pinInit()
				)
			)
		)
		stat += 1
		if (stat > stat:empathy) then (
			stat := stat:life
			who += 1
		)
	end

	subscript, conditionInit, begin
		switch (condition) do (
			case (encounter:won) do (
				who := char:rose

				$10="Encounter cleared."

				write(-1)

				textWait := true
				state := 0
			)
			case (encounter:talked) do (
				who := char:rose

				$10="They departed, satisfied."

				write(-1)

				textWait := true
				state := 0
			)
			case (encounter:ran) do (
				who := char:rose
				$10="Successfully ran."
				write(-1)
				state := -1
			) else (
				state := -1
			)
		)
	end

	subscript, statinit, begin
		who := char:rose
		stat := stat:life
		state := 1
	end

	subscript, pinInit, begin
		who := char:rose
		state := 2
	end

	subscript, pinUpdate, begin
		if (who > char:Kat) then (
			state := -1
		)else if (getPinId(who, pin)) then (
			if (getPinCap(getPinLvl(who, pin))) then (
				copyString(10, who+strng:RoseName)
				getPinName(getPinId(who, pin))
				$10+"'s ${S11} pin is max level."
				expandString(10)
				write(-1)
			) else (
				if (lvlPin(who, pin)) then (
					copyString(10, who+strng:RoseName)
					getPinName(getPinId(who, pin))
					$10+"'s ${S11} pin grew to "
					appendNumber(10, getPinLvl(who, pin))
					$10+"."
					expandString(10)

					write(-1)
				)
			)
		)
		pin += 1
		if (pin > slot:stat2) then (
			pin := slot:atk1
			who += 1
		)
	end

	subscript, initCapCheck, begin
		state := 0
		who := char:rose
	end

	subscript,	updateCapCheck, begin
		statInit()
	end
end

define constant (5, questions)
script, initDialogue, parent, question,  begin
	variable (sli)
	switch (question) do (
		case (0) do (
			$10="question here" #put question here. always leave the "" in place
			textLine(parent, 0, true) #do not change this line

			$10="answer 1 here" #replace with the first answer
			sli := textLine(parent, 2) #do not change this line
			setExtra(sli,type:logic,	none) #change none to liked or
			setExtra(sli,type:anger,	none) #disliked to fit the
			setExtra(sli,type:slut,		none) #personality
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="answer 2 here" 
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="answer 3 here"
			sli := textLine(parent, 4)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="answer 4 here"
			sli := textLine(parent, 5)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)
		)
		case (1) do (
			$10="What do you want from life?"
			textLine(parent, 0, true)

			$10="I need nothing."
			sli := textLine(parent, 2)
			setExtra(sli,type:logic,	liked)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		liked)

			$10="I want to be loved."
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="I want you to be happy."
			sli := textLine(parent, 4)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	liked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)
		)
		case (2) do (
			$10="Do you hate me?"
			textLine(parent, 0, true)

			$10="No."
			sli := textLine(parent, 2)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	liked)
			setExtra(sli,type:sad,		liked)

			$10="Yes."
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	liked)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		disliked)
		)
		case (3) do (
			$10="What is love to you?" #put question here. always leave the "" in place
			textLine(parent, 0, true) #do not change this line

			$10="Love is deep acceptance." #replace with the first answer
			sli := textLine(parent, 2) #do not change this line
			setExtra(sli,type:logic,	disliked) #change none to liked or
			setExtra(sli,type:anger,	disliked) #disliked to fit the
			setExtra(sli,type:slut,		liked) #personality
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		liked)

			$10="There is no such thing as love." 
			sli := textLine(parent, 3) #do not change this line
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	liked)
			setExtra(sli,type:slut,		disliked)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	disliked)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		liked)

			$10="Fuck you."
			sli := textLine(parent, 4) #do not change this line
			setExtra(sli,type:logic,	disliked)
			setExtra(sli,type:anger,	liked)
			setExtra(sli,type:slut,		disliked)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	disliked)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		none)

			$10="Love is attraction to another."
			sli := textLine(parent, 5) #do not change this line
			setExtra(sli,type:logic,	liked)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		none)
		)
		case (4) do (
			$10="Where does life comes from?" #put question here. always leave the "" in place
			textLine(parent, 0, true) #do not change this line

			$10="My cooter." #replace with the first answer
			sli := textLine(parent, 2) #do not change this line
			setExtra(sli,type:logic,	liked) #change none to liked or
			setExtra(sli,type:anger,	none) #disliked to fit the
			setExtra(sli,type:slut,		liked) #personality
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	disliked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="It comes from the ocean." 
			sli := textLine(parent, 3) #do not change this line
			setExtra(sli,type:logic,	liked)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	disliked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		liked)

			$10="They came from outer space."
			sli := textLine(parent, 4) #do not change this line
			setExtra(sli,type:logic,	liked)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	liked)
			setExtra(sli,type:sad,		none)

			$10="Random explosion in space."
			sli := textLine(parent, 5) #do not change this line
			setExtra(sli,type:logic,	liked)
			setExtra(sli,type:anger,	liked)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		none)
		) case (5) do (
			$10="Does life end after death?" #put question here. always leave the "" in place
			textLine(parent, 0, true) #do not change this line

			$10="No one knows what's next." #replace with the first answer
			sli := textLine(parent, 2) #do not change this line
			setExtra(sli,type:logic,	liked) #change none to liked or
			setExtra(sli,type:anger,	none) #disliked to fit the
			setExtra(sli,type:slut,		none) #personality
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		disliked)

			$10="I hope so..." 
			sli := textLine(parent, 3) #do not change this line
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		liked)

			$10="We become the universe."
			sli := textLine(parent, 4) #do not change this line
			setExtra(sli,type:logic,	liked)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	liked)
			setExtra(sli,type:sad,		liked)

			$10="Heaven or hell."
			sli := textLine(parent, 5) #do not change this line
			setExtra(sli,type:logic,	disliked)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	liked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		none)
		)
	)
end