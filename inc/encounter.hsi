script, encounter, who, tick, begin
	variable (parent, textSli, hpSli, condition, state, turn, i, j, target, slot, textWait, lastTurn)
	initEncounter()
	while (true) do (
		if (
			condition==encounter:won || condition==encounter:lost || condition==encounter:ran
		) then (break)
		tick += 1
		updateEncounter()
		wait
	)
	endEncounter()
	return(tick)

	subscript, updateEncounter, begin
		sinedist(parent, tick)
		if (textWait) then (
			if (newpresskey(b:a)) then (
				textWait := false
				updateHP()
				if (state == encounter:choose) then (
					changeState(encounter:choose)
				)
				wait
			)
		) else if (turn == turn:enemy) then (
			updateTurn
			enemyTurn
		) else (
			updateTurn
			switch (state) do (
				case (encounter:choose) do (
					if (newpresskey(b:l)) then (
						if (condition == encounter:peaceful) then (
							changeState(encounter:talk)
						) else (
							freeSliceChildren (TextSli)
							$10="They are too angry to talk"
							textLine(textSli, 0)
							textWait:= true
						)
					) else if (newpresskey(b:a)) then (
						changeState(encounter:skill)
					)else if (newpresskey(b:b)) then (
						changeState(encounter:run)
					)
				)
				case (encounter:talk) do (
					if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					) if (newkeypress(key:1)) then (
						 answer(1)
					) else if (newkeypress(key:2)) then (
						answer(2)
					) else if (newkeypress(key:3)) then (
						answer(1)
					) else if (newkeypress(key:4)) then (
						answer(1)
					)
				)
				case (encounter:run) do (
					if (newpresskey(b:a)) then (
						condition := encounter:ran
					)else if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					)
				)
				case (encounter:skill) do (
					if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					) else if (newpresskey(b:u)) then (
						slot := slot:atk1
						if (getPinID(turn, slot)<>pin:dummy) then(
							changeState(encounter:target)
						)
					) else if (newpresskey(b:d)) then (
						slot := slot:atk2
						if (getPinID(turn, slot)<>pin:dummy) then(
							changeState(encounter:target)
						)
					)
				)
				case (encounter:target) do (
					if (newpresskey(b:b)) then (
						changeState(encounter:skill)
					) else if (newpresskey(b:u)) then (
						if (getTargets()==target:party || getTargets()==target:all) then (
							freeSliceChildren (TextSli)
							getPinName(getPinId(turn, slot))
							if (turn == char:Rose) then (
								$10="${S1} used ${S11} on "
							) else if (turn == char:kat) then (
								$10="${S2} used ${S11} on "
							)
							$10+"${S1}."
							expandString(10)
							textLine(textSli, 0)

							usePin(turn, char:Rose, slot)
							textLine(textSli, 2)

							textWait := true
							turn += 1
						)
					) else if (newpresskey(b:d)) then (
						if (getTargets()==target:party || getTargets()==target:all) then (
							freeSliceChildren (TextSli)
								getPinName(getPinId(turn, slot))
							if (turn == char:Rose) then (
								$10="${S1} used ${S11} on "
							) else if (turn == char:kat) then (
								$10="${S2} used ${S11} on "
							)
							$10+"${S2}."
							expandString(10)
							textLine(textSli, 0)

							usePin(turn, char:kat, slot)
							textLine(textSli, 2)

							textWait := true
							turn += 1
						)
					) else if (newpresskey(b:r)) then (
						if (getTargets()==target:enemy) then (
							freeSliceChildren (TextSli)
							getPinName(getPinId(turn, slot))
							if (turn == char:Rose) then (
								$10="${S1} used ${S11} on "
							) else if (turn == char:kat) then (
								$10="${S2} used ${S11} on "
							)
							$10+"${S3}."
							expandString(10)
							textLine(textSli, 0)

							usePin(turn, char:Enemy, slot)
							textLine(textSli, 2)

							if (getPinId(turn, slot) >=pin:flame && getPinId(turn, slot) <= pin:shock) then (
								condition := encounter:enraged
							)
							
							textWait := true
							turn += 1
						)
					)
				) else (
					if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					)
				)
			)
		)
		overlayToFront()
	end

	subscript, updateTurn, begin
		if (lastTurn<>turn) then (
			lastTurn := turn
			if (turn > char:enemy) then (turn := char:rose)
			if (turn <> char:Rose) then (changeState(encounter:choose))
		)
	end

	subscript, enemyTurn, begin
		variable (slot, target)

		if (condition == encounter:enraged) then (
			slot := random (1, 100)
			if (slot > 75) then (
				slot := slot:atk1
			) else (
				slot := slot:atk2
			)
			switch (getTargets()) do (
				case (target:enemy) do (
					target := random(char:Rose, char:Kat)	
				)
				case (target:party) do (
					target := char:enemy
				)
				case (target:all) do (
					target := random(char:Rose, char:enemy)
				)
			)
			freeSliceChildren (TextSli)

			getPinName(getPinId(turn, slot))
			$10="${S3} used ${S11} on "
			switch (target) do (
				case (char:rose) do (
					$10+"${S1}"
				)
				case (char:kat) do (
					$10+"${S2}"
				)
				case (char:enemy) do (
					$10+"${S3}"
				)
			)
			expandString(10)
			textLine(textSli, 0)

			usePin(turn, target, slot)
			textLine(textSli, 2)
			textWait := true
		) else if (condition == encounter:peaceful) then (
			freeSliceChildren(textSli)
			$10="They seem to be waiting."
			textLine(textSli, 0)
			textWait := true
		)
		turn += 1
	end

	subscript, changeState, which, begin
		switch (which) do (
			case (encounter:choose) do (
				freeSliceChildren (TextSli)

				$10="Choose Action"
				textLine(textSli, 0)

				$10="left: talk"
				textLine(textSli, 2)
				$10="A: pins"
				textLine(textSli, 3)
				$10="B: run"
				textLine(textSli, 4)
			)
			case (encounter:run) do (
				freeSliceChildren(TextSli)
				$10="Confirm"
				textLine(textSli, 0)
				$10="A: run"
				textLine(textSli, 2)
				$10="B: cancel"
				textLine(textSli, 3)
			)
			case (encounter:talk) do (
				freeSliceChildren (textSli)
				initDialogue(textSli)
			)
			case (encounter:skill) do (
				freeSliceChildren (textSli)
				initSkill()
			) case (encounter:target) do (
				initTarget()
			)
			else (
				freeSliceChildren (textSli)
			)
		)
		state := which
	end

	subscript, updateHP, begin

		for (i, 0, 2) do (
			$10=""
			appendNumber (10, getStat(i, stat:currentlife))
			setSliceText(sliceChild(hpSli, i), 10)
			if (i==char:enemy && getStat(i, stat:currentlife) == 0) then (
				condition := encounter:won
			)
		)
	end

	subscript, initSkill, begin
		$10="Choose Pin"
		textLine(textSli, 0)
		
		if (getPinId(turn, slot:atk1) && getPinId(turn, slot:atk2) ) then (
			$10="No equipped pins"
			textLine(textSli, 2)
		) else (
			if (getPinId(turn, slot:atk1)==false) then (
				$10="Empty"
			) else (
				getPinName(getPinId(turn, slot:atk1))
				$10="Up: ${S11} lvl "
				expandString(10)
				appendNumber(10, getPinLvl(turn, slot:atk1))
			)
			textLine(textSli, 2)

			if (getPinId(turn, slot:atk2)==false) then (
				$10="Empty"
			) else (
				getPinName(getPinId(turn, slot:atk2))
				$10="Down: ${S11} lvl "
				expandString(10)
				appendNumber(10, getPinLvl(turn, slot:atk2))
			)
			textLine(textSli, 3)
		)
	end

	subscript, initTarget, begin
		freeSliceChildren(textSli)
		getPinName(slot)
		$10="Choose who to use ${S11} on."
		expandString(10)
		
		switch (getTargets()) do (
			case (target:party) do (
				textLine(textSli, 0)
				$10="Up: ${S1}"
				expandString(10)
				textLine(textSli, 2)
				$10="Down: ${S2}"
				expandString(10)
				textLine(textSli, 3)	
			)
			case (target:all) do (
				textLine(textSli, 0)
				$10="Up: ${S1}"
				expandString(10)
				textLine(textSli, 2)
				$10="Down: for ${S2}"
				expandString(10)
				textLine(textSli, 3)
				$10="Right: ${S3}"
				expandString(10)
				textLine(textSli, 4)
			)
			case (target:enemy) do (
				$10="Attack ${S3}?"
				expandString(10)
				textLine(textSli, 0)
				$10="Right: confirm"
				textLine(textSli, 2)
			)
		)
	end

	subscript, getTargets, begin
		if (getPinId(turn, slot) == pin:heart) then (
			return (target:party)
		) else if (getPinId(turn, slot) >= pin:addFlame && getPinId(turn, slot) <= pin:addEarth) then (
			return (target:all)
		) else (
			return (target:enemy)
		)
	end

	subscript, answer, which, begin
		
		if (sliceChild(textSli, which)==false) then (exitScript)
		switch (getExtra(sliceChild(textSli, which), getStat(char:enemy, stat:personality))) do (
			case (none) do (
				freeSliceChildren(textSli)
				$10="Neither liked nor disliked"
				textLine(textSli, 0)
				textWait := true
				turn += 1
		 	)
		 	case (liked) do (
		 		freeSliceChildren(textSli)
		 		$10="Liked"
				textLine(textSli, 0)
				textWait := true
				turn += 1
		 	)
		 	case (disliked) do (
		 		freeSliceChildren(textSli)
		 		$10="Disliked"
				textLine(textSli, 0)
				textWait := true
				turn += 1
		 	)
		)

	end

	subscript, initEncounter, begin
		#playSong(song:home bittersweet home)
		condition := encounter:peaceful
		turn := turn:rose
		parent := loadSliceCollection (1)

		textSli := sliceChild(firstChild(parent), 1)

		hpSli :=  sliceChild(firstChild(parent), 3)

		who := enemy:dummy
		loadbattleback(parent, who)

		initEnemy(who)

		for (i, char:rose, char:enemy) do (
			setStat(i, stat:currentlife, getStat(i, stat:life))
			updateStats(who, true)
			setStat(who, stat:atr, getPinID(who, slot:atr) + 1 -- pin:flameAtr)
		)
		updateHP()

		changeState(encounter:choose)
	end

	subscript, endEncounter, begin
		statGain(char:Rose, gain:battled)
		statGain(char:Kat, gain:battled)

		playSong(getambientmusic)

		afterEncounter(condition, parent)
	end
end

script, afterEncounter, condition, parent, begin
	variable(sli, stat, exiter, textWait, who, levelIsCapped, pin, i, state)
	state := -1
	init()
	while (true) do (
		if (textWait==true) then (
			if (pressKey(b:a)) then (
				freeSliceChildren (sli)
				textWait := false	
			)
			wait
			overlayToFront
		) else (if (update) then (break))
	)
	freeSlice(sli)

	subscript, init, begin
		freeSlice(lastChild(parent))
		freeBattleBack(parent)
		wait(104)
		freeSlice(parent)
		conditionInit()
	end

	subscript, update, begin
		switch(state) do (
			case (0) do (updateCapCheck)
			case (1) do (statUpdate)
			case (2) do (pinUpdate)
			else (return (true))
		)
	end

	subscript, statUpdate, begin
		if (who > char:Kat) then (
			pinInit()
		) else if (getLvl(who) >= getCap) then (
			freeSliceChildren(sli)
			copyString(10, who+strng:roseName)
			$10+" has reached the level cap."
			expandString(10)
			textLine(sli, 0)
			who += 1
			textWait := true
		) else (
			if (updateStat(who, stat, false)) then (
				freeSliceChildren (sli)
				copyString(10, who+strng:RoseName)

				$10+"'s "

				concatenateStrings (10, stat + strng:life -- stat:life)

				$10+" grew to "

				appendNumber(10, getStat(who, stat))

				$10+"."

				expandString(10)
				textLine(sli, 0)
				textWait := true
			) else (
				if (who > char:Kat) then (
					pinInit()
				)
			)
		)
		stat += 1
		if (stat > stat:empathy) then (
			stat := stat:life
			who += 1
		)
	end

	subscript, conditionInit, begin
		switch (condition) do (
			case (encounter:won) do (
				sli := loadSliceCollection(2)
				sli := firstChild(sli)
				who := char:rose

				$10="Encounter cleared."

				textLine(sli, 0)

				textWait := true
				state := 0
			)
			case (encounter:ran) do (
				sli := loadSliceCollection(2)
				sli := firstChild(sli)
				who := char:rose
				$10="Successfully ran."
				textLine(sli, 0)

				textWait := true
				state := -1
			) else (
				state := -1
			)
		)
	end

	subscript, statinit, begin
		who := char:rose
		stat := stat:life
		state := 1
	end

	subscript, pinInit, begin
		who := char:rose
		state := 2
	end

	subscript, pinUpdate, begin

		if (condition == encounter:won) then (
			if (who > char:Kat) then (
				state := -1
			)else if (getPinId(who, pin)) then (
				if (getPinCap(getPinLvl(who, pin))) then (
					copyString(10, who+strng:RoseName)
					getPinName(getPinId(who, pin))
					$10+"'s ${S11} pin is max level."
					expandString(10)
					textLine(sli, 0)
					textWait := true
				) else (
					if (lvlPin(who, pin)) then (
						copyString(10, who+strng:RoseName)
						getPinName(getPinId(who, pin))
						$10+"'s ${S11} pin grew to "
						appendNumber(10, getPinLvl(who, pin))
						$10+"."
						expandString(10)

						textLine(sli, 0)
						textWait := true
					)
				)
			)
			pin += 1
			if (pin > slot:stat2) then (
				pin := slot:atk1
				who += 1
			)
		)
	end

	subscript, initCapCheck, begin
		state := 0
		who := char:rose
	end

	subscript,	updateCapCheck, begin
		statInit()
	end
end

script, initDialogue, parent, begin
	variable (rand, sli)
	rand := random (1, 2)
	switch (rand) do (
		case (0) do (
			$10="question here" #put question here. always leave the "" in place
			textLine(parent, 0) #do not change this line

			$10="answer 1 here" #replace with the first answer
			sli := textLine(parent, 2) #do not change this line
			setExtra(sli,type:logic,	none) #change none to liked or
			setExtra(sli,type:anger,	none) #disliked to fit the
			setExtra(sli,type:slut,		none) #personality
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="answer 2 here" 
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="answer 3 here"
			sli := textLine(parent, 4)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="answer 4 here"
			sli := textLine(parent, 5)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)
		)
		case (1) do (
			$10="What do you want from life?"
			textLine(parent, 0)

			$10="I need nothing."
			sli := textLine(parent, 2)
			setExtra(sli,type:logic,	liked)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		liked)

			$10="I want to be loved."
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="I want you to be happy."
			sli := textLine(parent, 4)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	liked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)
		)
		case (2) do (
			$10="Do you hate me?"
			textLine(parent, 0)

			$10="No."
			sli := textLine(parent, 2)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	liked)
			setExtra(sli,type:sad,		liked)

			$10="Yes."
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	liked)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		disliked)
		)
	)
end