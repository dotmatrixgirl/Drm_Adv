script, encounter, who, tick, begin
	variable (parent, textSli, condition, state, enemySli, turn, i)
	initEncounter()
	while (true) do (
		updateEncounter()
		if (
			condition==encounter:won || condition==encounter:lost || condition==encounter:ran
		) then (break)
		tick += 1
		wait
	)
	endEncounter()
	return(tick)	

	subscript, updateEncounter, begin
		switch (state) do (
			case (encounter:choose) do (
				if (newpresskey(b:u)) then (
					changeState(encounter:talk)
				) else if (newpresskey(b:a)) then (
					changeState(encounter:fight)
				)else if (newpresskey(b:d)) then (
					changeState(encounter:item)
				)else if (newpresskey(b:b)) then (
					changeState(encounter:run)
				)
			)
			case (encounter:talk) do (
				if (newpresskey(b:b)) then (
					changeState(encounter:choose)
				)
			)
			case (encounter:run) do (
				if (newpresskey(b:a)) then (
					condition := encounter:ran
				)else if (newpresskey(b:b)) then (
					changeState(encounter:choose)
				)
			)
			else (
				if (newpresskey(b:b)) then (
					changeState(encounter:choose)
				)
			)
		)
	end

	subscript, changeState, which, begin
		switch (which) do (
			case (encounter:choose) do (
				freeSliceChildren (TextSli)

				$10="Choose Action"
				textLine(textSli, 0)

				$10="Up: talk"
				textLine(textSli, 2)
				$10="A: pins"
				textLine(textSli, 3)
				$10="Down: items"
				textLine(textSli, 4)
				$10="B: run"
				textLine(textSli, 5)
			)
			case (encounter:run) do (
				freeSliceChildren(TextSli)
				$10="Confirm"
				textLine(textSli, 0)
				$10="A: run"
				textLine(textSli, 2)
				$10="B: cancel"
				textLine(textSli, 3)
			)
			case (encounter:talk) do (
				freeSliceChildren (textSli)
				initDialogue(textSli)
			)
			case (encounter:fight) do (
				freeSliceChildren (textSli)
				initFight()
			)
			else (
				freeSliceChildren (textSli)
			)
		)
		state := which
	end

	subscript, initFight, begin
		$10="Choose Pin"
		textLine(textSli, 0)
		
		if (getPinId(turn, 0)==pin:dummy && getPinId(turn, 1)==pin:dummy) then (
			$10="No equipped pins"
			textLine(textSli, 2)
		) else (
			if (getPinId(turn, 0)==pin:dummy) then (
				$10="Empty"
			) else (
				getPinName(getPinId(turn, 0))
				$10="Up: ${S11} lvl "
				expandString(10)
				appendNumber(10, getPinLvl(turn, 0))
			)
			textLine(textSli, 2)

			if (getPinId(turn, 1)==pin:dummy) then (
				$10="Empty"
			) else (
				getPinName(getPinId(turn, 1))
				$10="Down: ${S11} lvl "
				expandString(10)
				appendNumber(10, getPinLvl(turn, 1))
			)
			textLine(textSli, 3)
		)
	end

	subscript, initEncounter, begin
		condition := encounter:peaceful
		turn := turn:rose
		parent := createRect()
		setSliceSize(parent, getScreenWidth--40, getScreenHeight--40)
		center slice (parent)
		setRectStyle(parent, 0)
		
		textSli := createRect(sliceWidth(parent), 80)
		setParent(textSli, parent)
		realignSlice(textSli, edge:center, edge:bottom, edge:center, edge:bottom)
		setPadding(textSli, 10)
		setRectStyle(textSli, 0)

		enemySli := createContainer()
		setSliceClipping(enemySli)

		setParent(initEnemy(who), enemySli)

		changeState(encounter:choose)
	end

	subscript, endEncounter, begin
		freeSlice (parent)
	end
end

#caculate attack damage using attacker, attack, and target
# *brian explodes*
script, attackDamage, attacker, pin, target, begin
	variable (atr, psi, mind, sli, damage)
	psi := statValue(attacker, stat:psi)
	mind := statValue(target, stat:mind)

	damage := getPinEffect(pin, psi, mind)

	#*1.5 if attacking with atribute of pin
	atr := getPinId(attacker, slot:atr)
	if (atr -- 9 == pin) then (damage := damage + damage/2)


	#if weak, damage*1.5 ; if strong, damage/2
	if (elementCheck(pin, target) == weak) then (
		damage := (damage + damage/2)
	) else if (elementCheck(pin, target) == strong) then (
		damage := (damage/2)
	)
end

#math go brr
script, elementCheck, pin, target, begin
	variable (modded, atr)

	atr := getPinId(target, slot:atr)

	if (atr == pin:dummy) then (exitScript)

	pin := pin -- 5
	atr := atr -- 14

	#make it 4 into a 0 for math reasons.
	modded := pin, mod, 4
	if (modded  -- atr == -1) then (
		return (weak)
	)

	#make it 4 into a 0 for math reasons.
	modded := atr, mod, 4
	if (pin -- modded == 1) then (
		return (strong)
	)
end

script, initDialogue, parent, begin
	variable (rand, sli)
	rand := random (0, 1)
	switch (rand) do (
		case (0) do (
			$10="What do you want from life?"
			textLine(parent, 0)

			$10="I need nothing."
			sli := textLine(parent, 2)
			setExtra(sli,type:logic,	liked)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		liked)

			$10="I want to be loved."
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="I want you to be happy."
			sli := textLine(parent, 4)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	liked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)
		)
		case (1) do (
			$10="Do you hate me?"
			textLine(parent, 0)

			$10="No."
			sli := textLine(parent, 2)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	liked)
			setExtra(sli,type:sad,		liked)

			$10="Yes."
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	liked)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		disliked)
		)
	)
end