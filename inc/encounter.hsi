script, encounter, who, tick, begin
	variable (parent, textSli, hpSli, condition, state, turn, i)
	initEncounter()
	while (true) do (
		updateEncounter()
		if (
			condition==encounter:won || condition==encounter:lost || condition==encounter:ran
		) then (break)
		tick += 1
		wait
	)
	endEncounter()
	return(tick)

	subscript, updateEncounter, begin
		if (turn == turn:enemy) then (
			enemyTurn
			nextTurn
		) else (
			switch (state) do (
				case (encounter:choose) do (
					if (newpresskey(b:u)) then (
						changeState(encounter:talk)
					) else if (newpresskey(b:a)) then (
						changeState(encounter:skill)
					)else if (newpresskey(b:d)) then (
						changeState(encounter:item)
					)else if (newpresskey(b:b)) then (
						changeState(encounter:run)
					)
				)
				case (encounter:talk) do (
					if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					)
				)
				case (encounter:run) do (
					if (newpresskey(b:a)) then (
						condition := encounter:ran
					)else if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					)
				)
				case (encounter:skill) do (
					if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					) else if (newpresskey(b:u)) then (
						if (getPinId(turn, slot:atk1) == pin:heart) then (
							usePin(turn,((turn + 1),mod,2), slot:atk1)
						) else(
							usePin(turn, char:enemy, slot:atk1)
						)
						
						(nextTurn)
					) else if (newpresskey(b:d)) then (
						if (getPinId(turn, slot:atk2) == pin:heart) then (
							usePin(turn, ((turn + 1),mod,2), slot:atk2)
						) else(
							usePin(turn, char:enemy, slot:atk2)
						)
						(nextTurn)
					)
				)
				else (
					if (newpresskey(b:b)) then (
						changeState(encounter:choose)
					)
				)
			)
		)
	end

	subscript, nextTurn, begin
		updateHP()
		turn += 1
		if (turn > char:enemy) then (turn := char:rose)
		if (turn <> char:Rose) then (changeState(encounter:choose))
	end

	subscript, enemyTurn, begin
		variable (slot)

		wait (60)

		slot := random (1, 100)
		if (slot > 75) then (
			slot := slot:atk1
		) else (
			slot := slot:atk2
		)

		if (getPinId(turn, slot) == pin:Life) then (
			usePin(turn, turn, slot)
		) else (
			usePin(turn, random (char:Rose, char:Kat), slot)
		)
	end


	subscript, changeState, which, begin
		switch (which) do (
			case (encounter:choose) do (
				freeSliceChildren (TextSli)

				$10="Choose Action"
				textLine(textSli, 0)

				$10="Up: talk"
				textLine(textSli, 2)
				$10="A: pins"
				textLine(textSli, 3)
				$10="Down: items"
				textLine(textSli, 4)
				$10="B: run"
				textLine(textSli, 5)
			)
			case (encounter:run) do (
				freeSliceChildren(TextSli)
				$10="Confirm"
				textLine(textSli, 0)
				$10="A: run"
				textLine(textSli, 2)
				$10="B: cancel"
				textLine(textSli, 3)
			)
			case (encounter:talk) do (
				freeSliceChildren (textSli)
				initDialogue(textSli)
			)
			case (encounter:skill) do (
				freeSliceChildren (textSli)
				initSkill()
			)
			else (
				freeSliceChildren (textSli)
			)
		)
		state := which
	end

	subscript, updateHP, begin

		for (i, 0, 2) do (
			$10=""
			appendNumber (10, statLvl(i, stat:currentlife))
			setSliceText(sliceChild(hpSli, i), 10)
			if (i==char:enemy&&statLvl(i, stat:currentlife) == 0) then (
				condition := encounter:won
			)
		)
	end

	subscript, initSkill, begin
		$10="Choose Pin"
		textLine(textSli, 0)
		
		if (getPinId(turn, 0)==pin:dummy && getPinId(turn, 1)==pin:dummy) then (
			$10="No equipped pins"
			textLine(textSli, 2)
		) else (
			if (getPinId(turn, 0)==pin:dummy) then (
				$10="Empty"
			) else (
				getPinName(getPinId(turn, slot:atk1))
				$10="Up: ${S11} lvl "
				expandString(10)
				appendNumber(10, getPinLvl(turn, slot:atk1))
			)
			textLine(textSli, 2)

			if (getPinId(turn, 1)==pin:dummy) then (
				$10="Empty"
			) else (
				getPinName(getPinId(turn, slot:atk2))
				$10="Down: ${S11} lvl "
				expandString(10)
				appendNumber(10, getPinLvl(turn, slot:atk2))
			)
			textLine(textSli, 3)
		)
	end

	subscript, initEncounter, begin
		condition := encounter:peaceful
		turn := turn:rose
		parent := loadSliceCollection (1)

		textSli := sliceChild(firstChild(parent), 1)

		hpSli :=  sliceChild(firstChild(parent), 3)

		who := enemy:dummy

		initEnemy(who)

		for (i, char:Rose, char:Enemy) do (
			setLvl(i, stat:currentlife, statValue(i, stat:life))
		)
		updateHP()

		changeState(encounter:choose)
	end

	subscript, endEncounter, begin
		wait (50)
		freeSlice (parent)

		statGain(char:Rose, gain:battled)
		statGain(char:Kat, gain:battled)
		setAllStatLvl(char:Rose)
		setAllStatLvl(char:Kat)
	end
end

#math go brr
script, elementCheck, pin, target, begin
	variable (modded, atr)

	atr := getPinId(target, slot:atr)

	if (atr == pin:dummy) then (exitScript)

	pin := pin -- 5
	atr := atr -- 14

	#make it 4 into a 0 for math reasons.
	modded := pin, mod, 4
	if (modded  -- atr == 1) then (
		return (weak)
	)

	#make it 4 into a 0 for math reasons.
	modded := atr, mod, 4
	if (pin -- modded == -1) then (
		return (strong)
	)
end

script, initDialogue, parent, begin
	variable (rand, sli)
	rand := random (0, 1)
	switch (rand) do (
		case (0) do (
			$10="What do you want from life?"
			textLine(parent, 0)

			$10="I need nothing."
			sli := textLine(parent, 2)
			setExtra(sli,type:logic,	liked)
			setExtra(sli,type:anger,	none)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		liked)

			$10="I want to be loved."
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)

			$10="I want you to be happy."
			sli := textLine(parent, 4)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	liked)
			setExtra(sli,type:caring,	liked)
			setExtra(sli,type:scared,	none)
			setExtra(sli,type:sad,		none)
		)
		case (1) do (
			$10="Do you hate me?"
			textLine(parent, 0)

			$10="No."
			sli := textLine(parent, 2)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	disliked)
			setExtra(sli,type:slut,		liked)
			setExtra(sli,type:selfish,	none)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	liked)
			setExtra(sli,type:sad,		liked)

			$10="Yes."
			sli := textLine(parent, 3)
			setExtra(sli,type:logic,	none)
			setExtra(sli,type:anger,	liked)
			setExtra(sli,type:slut,		none)
			setExtra(sli,type:selfish,	disliked)
			setExtra(sli,type:caring,	none)
			setExtra(sli,type:scared,	disliked)
			setExtra(sli,type:sad,		disliked)
		)
	)
end