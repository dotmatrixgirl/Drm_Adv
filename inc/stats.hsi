script, initChar, who, begin
	variable (sli, i)
	sli := createContainer()
	setParent(sli, lookupslice(sli:chars))
	setSliceClipping(sli)
	resizeExtra(sli, 16)

	setParent(createContainer, sli)
	setParent(createContainer, sli)
	setParent(createContainer, sli)
	setParent(createContainer, sli)
	setParent(createContainer, sli)

	addEquipPin(who, slot:atk2, pin:dummy)
	addEquipPin(who, slot:stat1, pin:dummy)
	addEquipPin(who, slot:stat2, pin:dummy)

	switch (who) do (
		case (hero:rose) do (
			initLvl(who, lvl:life, 1)
			initLvl(who, lvl:psi, 1)
			initLvl(who, lvl:mind, 1)
			initLvl(who, lvl:speed, 1)
			initLvl(who, lvl:empathy, 1)
			setLvl(who, stat:alignment, 50)

			addEquipPin(who, slot:atk1, pin:heart)
			addEquipPin(who, slot:atr, pin:earthatr)
		)
		case (hero:kat) do (
			initLvl(who, lvl:life, 4)
			initLvl(who, lvl:psi, 3)
			initLvl(who, lvl:mind, 5)
			initLvl(who, lvl:speed, 4)
			initLvl(who, lvl:empathy, 7)
			setLvl(who, stat:alignment, 40)

			addEquipPin(who, slot:atk1, pin:water)
			addEquipPin(who, slot:atr, pin:waterAtr)
		)
	)
end

script, initEnemy, who, begin
	variable (sli)

	sli := sliceChild(lookupSlice(sli:chars), char:enemy)
	if (sli) then (
		freeSlice (sli)
	)

	sli := createContainer()
	set parent(sli, lookupSlice(sli:chars))
	resizeExtra(sli, 16)

	switch (who) do (
		case (enemy:dummy) do (
			initLvl(sli, lvl:life, 3)
			initLvl(sli, lvl:psi, 2)
			initLvl(sli, lvl:mind, 4)
			initLvl(sli, lvl:speed, 2)
			initLvl(sli, lvl:will, 1)
			setLvl(sli, stat:personality, type:logic)

			createContainer()
			createContainer()
			createContainer()
			createContainer()
			createContainer()
			addEquipPin(char:enemy, slot:atk1, pin:flame)
			addEquipPin(char:enemy, slot:atk2, pin:flame)
			addEquipPin(char:enemy, slot:atr, pin:flameatr)

			setparent(loadBorderSprite(2), sli)
		)
	)
	return (sli)
end

script, addExp, who, stat, amount, begin
	variable(exp)
	exp := getExp(who, stat)+amount
	setExp(who, stat+exp:life, exp)
end

script, getExp, who, stat, begin
	variable (sli, boostedStat, boost)
	sli := lookupslice(sli:chars)
	sli := sliceChild(sli, who)

	return (getExtra(sli, stat+exp:Life))
end

script, setExp, who, stat, value, begin
	variable(sli)
	sli := lookupslice(sli:chars)
	sli := sliceChild(sli, who)

	setExtra(sli, stat+exp:Life, value)
end

script, setAllStatLvl, who, begin
	variable(i)

	for (i, lvl:life, lvl:empathy) do (
		setStatLvl(who, i)
	)
end

script, initLvl, who, stat, lvl, begin
	setExp (who, stat, lvl^2)
	setStatLvl (who, stat)
end

script, statLvl, who, stat, begin
	variable(sli)
	sli := lookupslice(sli:chars)
	sli := sliceChild(sli, who)

	return (getExtra(sli, stat))
end

script, setLvl, who, stat, lvl, begin
	variable(sli)
	sli := lookupslice(sli:chars)
	sli := sliceChild(sli, who)

	setExtra(sli, stat, lvl)
end

script, setStatLvl, who, stat, begin
	variable(exp, lvl, origLvl, sli)

	sli := lookupslice(sli:chars)
	sli := sliceChild(sli, who)

	#get level to check for levelup later
	origLvl := statLvl(who, stat)

	exp := getExp(who, stat)

	#this is where the level curve is determined
	lvl := sqrt(exp)

	setExtra(sli, stat, lvl)

	#return true if leveled up
	if (origLvl<>lvl) then (return (true))
end

script, statValue, who, stat, begin
	variable (value)

	value := statBaseValue(who, stat)
	value += getPinBoost(slot:stat1)
	value += getPinBoost(slot:stat2)

	return (value)

	subscript, getPinBoost, slot, begin
		variable (pin)
		pin := getPinId(who,slot)

		if (pin := stat+10) then (
			return (getPinEffect(pin, getPinLvl(who, 3), stat))
		)	
	end
end

script, statBaseValue, who, stat, begin
	variable (lvl, value)
	lvl := statLvl(who, stat)
	if (stat == stat:life) then (
		value := sqrt (((lvl + 6) * 2) ^ 4) / 30
	) else  if (stat == stat:alignment) then (
		value := lvl
	) else (
		value := sqrt (((lvl + 6) * 2) ^ 4) / 80
	)
	return (value)
end