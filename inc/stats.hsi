script, initChars, begin
	variable (parent, sli, i)

	addHero(char:kat)

	sli := createContainer ()
	setSliceLookup(sli, sli:chars)
	sli := createContainer ()
	setSliceLookup(sli, sli:pinBag)

	parent := createContainer()
	setParent(parent, lookupslice(sli:chars))
	setSliceClipping(parent)
	resizeExtra(parent, 16)

	setStat(char:rose, stat:life, 16)
	setStat(char:rose, stat:psi, 6)
	setStat(char:rose, stat:mind, 5)
	setStat(char:rose, stat:speed, 8)
	setStat(char:rose, stat:empathy, 4)
	setStat(char:rose, stat:alignment, 55)

	updateStats(char:rose, true)

	initPinSlots(char:rose)

	equipPin(char:Rose, slot:atk1, pin:heart, 5, false)
	equipPin(char:Rose, slot:atr, pin:earthatr, 0, false)

	setParent(loadBorderSprite(2), parent)
	$1="Rose"

	parent := createContainer()
	setParent(parent, lookupslice(sli:chars))
	setSliceClipping(parent)
	resizeExtra(parent, 16)

	setStat(char:kat, stat:life, 12)
	setStat(char:kat, stat:psi, 7)
	setStat(char:kat, stat:mind, 6)
	setStat(char:kat, stat:speed, 6)
	setStat(char:kat, stat:empathy, 7)
	setStat(char:kat, stat:alignment, 45)

	updateStats(char:kat, true)

	initPinSlots(char:kat)

	equipPin(char:kat, slot:atk1, pin:shock, 5, false)
	equipPin(char:kat, slot:atr, pin:shockatr, 0, false)

	setParent(loadBorderSprite(1), parent)
	$2="Kat"
end

script, initEnemy, who, begin
	variable (sli, i)

	sli := getStatSlice(char:enemy)
	if (sli) then (
		freeSlice (sli)
	)

	sli := createContainer()
	set parent(sli, lookupSlice(sli:chars))
	resizeExtra(sli, 16)
	setSliceClipping(sli, true)

	switch (who) do (
		case (enemy:dummy) do (
			setStat(char:enemy, stat:life, 16)
			setStat(char:enemy, stat:psi, 6)
			setStat(char:enemy, stat:mind, 8)
			setStat(char:enemy, stat:speed, 5)
			setStat(char:enemy, stat:will, 3)
			setStat(char:enemy, stat:personality, type:logic)

			initPinSlots(char:enemy)

			equipPin(char:enemy, slot:atk1, pin:flame, 3, false)
			equipPin(char:enemy, slot:atk2, pin:flame, 3, false)
			equipPin(char:enemy, slot:atr, pin:flameatr)

			setparent(loadBorderSprite(2), sli)
		) else (
			setStat(char:enemy, stat:life, 16)
			setStat(char:enemy, stat:psi, 6)
			setStat(char:enemy, stat:mind, 8)
			setStat(char:enemy, stat:speed, 5)
			setStat(char:enemy, stat:will, 3)
			setStat(char:enemy, stat:personality, type:logic)

			initPinSlots(char:enemy)

			equipPin(char:enemy, slot:atk1, pin:flame, 3, false)
			equipPin(char:enemy, slot:atk2, pin:flame, 3, false)
			equipPin(char:enemy, slot:atr, pin:flameatr)

			setparent(loadBorderSprite(2), sli)
		)
	)
	if (game:hard) then (
		for (i, stat:life, stat:will) do (
			setStat (char:enemy, i, getStat(char:enemy, i) * 10 / 8)
		)
	)
	return (sli)
end

script, statGain, who, type, pinSlot=slot:none, modifier=0, begin
	variable(i)
	if (who == char:enemy) then (
		exit script
	)
	if (modifier == 0) then (
		modifier := getLvl(char:enemy) / 2
		modifier += 1
	)
	switch (type) do (
		case (gain:damage) do (
			if (random (0, 8) >= 2) then (
				lvlStat(who, stat:mind, modifier * (random (2, 8)) / 8)	
			)
		)
		case (gain:attack) do (
			if (random (0, 8) >= 4) then (
				lvlStat(who, stat:psi, modifier * (random (2, 8)) / 8)	
			)
		)
		case (gain:failtalk) do (
			if (random (0, 8) >= 4) then (
				lvlStat(who, stat:empathy, modifier * (random (2, 8)) / 8)	
			)
		)
		case (gain:talked) do (
			if (random (0, 8) >= 2) then (
				lvlStat(who, stat:empathy, modifier * (random (2, 8)) / 8)	
			)
			if (random (0, 8) >= 2) then (
				lvlStat(who, stat:mind, modifier * (random (2, 8)) / 8)
			)	
		)
		case (gain:battled) do (
			for (i, slot:stat1, slot:stat2) do (
				addPinExp(who, i, modifier * random (3, 6))
			)
			if (random (0, 8) >= 2) then (
				lvlStat(who, stat:speed, modifier * (random (2, 8)) / 8)
			)
			if (random (0, 8) >= 2) then ( 
				lvlStat(who, stat:life, modifier * (random (2, 8)) / 4)
			)
		)
	)
end

script, getStat, who, stat, boosted=true, begin
	variable (sli, value)
	sli := getStatSlice(who)
	value := getExtra(sli, stat)
	if (boosted == false) then (
		return (value)
	) else (
		value += getPinBoost(slot:stat1)
		value += getPinBoost(slot:stat2)
		return (value)
	)
	subscript, getPinBoost, slot, begin
		variable (pin)
		pin := getPinId(who,slot)

		#add the first stat boosting pin to stat to get the stat
		if (pin == stat + pin:life) then (
			return (getPinEffect(pin, getPinLvl(who, 3), stat))
		)
	end
end

script, setStat, who, stat, value, begin
	variable (sli)
	sli := getStatSlice(who)
	return(setExtra(sli, stat, value))
end

script, lvlStat, who, stat, amount, capped=true, begin
	variable(i, base, lvlSum, cap)

	base := getStat(who, stat + stat:lvled, false)

	if (capped == true) then (
		cap := game:lvlCap * stat:empathy * 10
		if (getLvl(who) < Cap) then (
			setStat(who, stat + stat:lvled, base + amount)
		)
	) else (
		setStat(who, stat + stat:lvled, base + amount)
	)
end

script, updateStats, who, lvled=false, begin
	variable (i)

	for (i, stat:life, stat:empathy) do (
		if (lvled == false) then (
			setStat(who, i, getStat(who, i + stat:lvled, false))
		) else (
			setStat(who, i + stat:lvled, getStat(who, i, false))
		)
	)
end

script, getLvl, who, begin
	variable (lvl, i)

	lvl += getStat(who, stat:life, false)
	for (i, stat:psi, stat:empathy) do (
		lvl += getStat(who, i, false) / 4
		#change "12" as needed to modify lvl cap
	)
	lvl :=  lvl / stat:empathy
	return (lvl)
end

script, getStatSlice, who, begin
	variable(sli)
	sli := lookupslice(sli:chars)
	sli := sliceChild(sli, who)
	return (sli)
end

script, getCharSprite, who, begin
	variable(sli)
	sli := lookupslice(sli:chars)
	sli := sliceChild(sli, who)
	sli := sliceChild(sli, char:sprite)
	return (getSpriteSetNumber(sli))
end