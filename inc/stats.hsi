script, initChars, begin
	variable (parent, sli, i)

	addHero(char:kat)

	sli := createContainer ()
	setSliceLookup(sli, sli:chars)
	sli := createContainer ()
	setSliceLookup(sli, sli:pinBag)

	parent := createContainer()
	setParent(parent, lookupslice(sli:chars))
	setSliceClipping(parent)
	resizeExtra(parent, 16)

	initLvl(char:rose, lvl:life, 5)
	initLvl(char:rose, lvl:psi, 6)
	initLvl(char:rose, lvl:mind, 4)
	initLvl(char:rose, lvl:speed, 8)
	initLvl(char:rose, lvl:empathy, 3)
	setLvl(char:rose, stat:alignment, 50)

	initPinSlot(char:rose, slot:atk1, pin:heart, 1)
	initPinSlot(char:rose, slot:atk2, pin:dummy, 1)
	initPinSlot(char:rose, slot:stat1, pin:dummy, 1)
	initPinSlot(char:rose, slot:stat2, pin:dummy, 1)
	initPinSlot(char:rose, slot:atr, pin:earthatr, 1)

	setParent(loadBorderSprite(2), parent)
	$1="Rose"

	parent := createContainer()
	setParent(parent, lookupslice(sli:chars))
	setSliceClipping(parent)
	resizeExtra(parent, 16)

	initLvl(char:kat, lvl:life, 6)
	initLvl(char:kat, lvl:psi, 4)
	initLvl(char:kat, lvl:mind, 2)
	initLvl(char:kat, lvl:speed, 5)
	initLvl(char:kat, lvl:empathy, 6)
	setLvl(char:kat, stat:alignment, 40)

	initPinSlot(char:kat, slot:atk1, pin:shock)
	initPinSlot(char:kat, slot:atk2, pin:dummy)
	initPinSlot(char:kat, slot:stat1, pin:dummy)
	initPinSlot(char:kat, slot:stat2, pin:dummy)
	initPinSlot(char:kat, slot:atr, pin:shockAtr)

	setParent(loadBorderSprite(1), parent)
	$2="Kat"
end

script, getCharSprite, who, begin
	variable(sli)
	sli := lookupslice(sli:chars)
	sli := sliceChild(sli, who)
	sli := sliceChild(sli, char:sprite)
	return (getSpriteSetNumber(sli))
end

script, initEnemy, who, begin
	variable (sli, i)

	sli := sliceChild(lookupSlice(sli:chars), char:enemy)
	if (sli) then (
		freeSlice (sli)
	)

	sli := createContainer()
	set parent(sli, lookupSlice(sli:chars))
	resizeExtra(sli, 16)
	setSliceClipping(sli, true)

	switch (who) do (
		case (enemy:dummy) do (
			initLvl(char:enemy, lvl:life, 10)
			initLvl(char:enemy, lvl:psi, 6)
			initLvl(char:enemy, lvl:mind, 19)
			initLvl(char:enemy, lvl:speed, 5)
			initLvl(char:enemy, lvl:will, 3)
			setLvl(char:enemy, stat:personality, type:logic)

			initPinSlot(char:enemy, slot:atk1, pin:flame, 3)
			initPinSlot(char:enemy, slot:atk2, pin:flame, 3)
			initPinSlot(char:enemy, slot:stat1, pin:dummy)
			initPinSlot(char:enemy, slot:stat2, pin:dummy)
			initPinSlot(char:enemy, slot:atr, pin:flameatr)

			setparent(loadBorderSprite(2), sli)
		) else (
			initLvl(char:enemy, lvl:life, 9)
			initLvl(char:enemy, lvl:psi, 4)
			initLvl(char:enemy, lvl:mind, 6)
			initLvl(char:enemy, lvl:speed, 2)
			initLvl(char:enemy, lvl:will, 5)
			setLvl(char:enemy, stat:personality, type:logic)

			initPinSlot(char:enemy, slot:atk1, pin:flame, 3)
			initPinSlot(char:enemy, slot:atk2, pin:flame, 3)
			initPinSlot(char:enemy, slot:stat1, pin:dummy)
			initPinSlot(char:enemy, slot:stat2, pin:dummy)
			initPinSlot(char:enemy, slot:atr, pin:flameatr)

			setparent(loadBorderSprite(2), sli)
		)
	)
	if (game:hard) then (
		for (i, stat:life, stat:will) do (
			addLvl (char:enemy, i, StatLvl(char:enemy, i) / 8)
		)
	)
	return (sli)
end

script, maxHP, who, begin
	return (statValue(who, stat:life))
end

script, statGain, who, type, modifier=0, begin
	variable(i)
	if (who == char:enemy) then (
		exit script
	)
	if (modifier == 0) then (
		modifier := getEnemyLvl()
		showValue(modifier)
	)
	switch (type) do (
		case (gain:damage) do (
			addExpCapped (who, stat:mind, modifier * 2)
		)
		case (gain:attack) do (
			addExpCapped (who, stat:psi, modifier / 2)
		)
		case (gain:failtalk) do (
			addExpCapped (who, stat:empathy, modifier)
		)
		case (gain:talked) do (
			addExpCapped (who, stat:empathy, modifier * 4)
		)
		case (gain:battled) do (
			addExpCapped (who, stat:speed, random (3, 6) * modifier / 5)
			addExpCapped (who, stat:life, random(3, 7) * modifier / 5)
			for (i, slot:atk1, slot:stat2) do (
				addPinExpCapped(who, i, modifier * 2 / 5)
			)
		)
		else (showValue(0))
	)
end

script, getEnemyLvl, begin
	variable (lvl, i)

	for (i, stat:life, stat:will) do (
		lvl += statLvl(char:enemy, i)
	)
	lvl := lvl/5
	return (lvl)
end

script, addExpCapped, who, stat, amount, begin
	variable (lvlSum, i)
	for (i, stat:life, stat:will) do (
		lvlSum += statLvl (who, i)
	)
	if (lvlSum <= game:lvlCap) then (
		addExp(who, stat, amount)
	)
end

script, addExp, who, stat, amount, begin
	variable(exp)
	exp := getExp(who, stat)
	setExp(who, stat, exp+amount)
end

script, getExp, who, stat, begin
	variable (sli)
	sli := getStatSlice(who)

	return (getExtra(sli, stat+exp:Life))
end

script, setExp, who, stat, value, begin
	variable(sli)
	sli := getStatSlice(who)

	setExtra(sli, stat+exp:Life, value)
end

script, setAllStatLvl, who, begin
	variable(i)

	for (i, lvl:life, lvl:empathy) do (
		setStatLvl(who, i)
	)
end

script, initLvl, who, stat, lvl, begin
	setExp (who, stat, expFromLevel(lvl))
	setStatLvl (who, stat)
end

script, statLvl, who, stat, begin
	variable(sli)
	sli := getStatSlice(who)

	return (getExtra(sli, stat))
end

script, setLvl, who, stat, lvl, begin
	variable(sli)
	sli := getStatSlice(who)

	setExtra(sli, stat, lvl)
end

script, addLvl, who, stat, amount, begin
	variable(sli, i, lvlsum)

	for (i, stat:life, stat:will) do (
		lvlSum += statLvl (who, i)
	)
	if (lvlSum < game:lvlCap) then (
		setLvl(who, stat,  statLvl(who, stat) + amount)

	)
end

script, setStatLvl, who, stat, begin
	variable(exp, lvl, origLvl)

	#get level to check for levelup later
	origLvl := statLvl(who, stat)

	exp := getExp(who, stat)

	#this is where the level curve is determined
	lvl := expCurve(exp)

	setLvl(who, stat, lvl)

	#return true if leveled up
	if (origLvl < lvl) then (return (true))
end

script, expCurve, exp, begin
 	variable (lvl)

 	lvl := sqrt(exp)
 	return (lvl)
end

script, expFromLevel, lvl, begin
	variable (exp)
	exp := lvl ^ 2
	return (exp)
end

script, statValue, who, stat, begin
	variable (value)

	value := statBaseValue(who, stat)
	value += getPinBoost(slot:stat1)
	value += getPinBoost(slot:stat2)

	return (value)

	subscript, getPinBoost, slot, begin
		variable (pin)
		pin := getPinId(who,slot)

		if (pin == stat+10) then (
			return (getPinEffect(pin, getPinLvl(who, 3), stat))
		)
	end
end

script, getStatSlice, who, begin
	variable(sli)
	sli := lookupslice(sli:chars)
	sli := sliceChild(sli, who)
	return (sli)
end

script, statBaseValue, who, stat, begin
	variable (lvl, value)
	lvl := statLvl(who, stat)
	if (stat == stat:life) then (
		value := sqrt (((lvl + 6) * 2) ^ 4) / 30
	) else  if (stat == stat:alignment) then (
		value := lvl
	) else (
		value := sqrt (((lvl + 6) * 2) ^ 4) / 80
	)
	return (value)
end