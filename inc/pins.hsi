script, addPinToBag, id, lvl=1, begin
	variable (sli)
	sli := initPin(id, lvl)
	setParent(sli, lookupSlice(sli:pinbag))
end

script, equipPin, who, slot, bagSlotID, lvl=0, fromBag=true, begin
	variable(sli, sliSlot, sliBagPin)

	sli := returnPinSlice(who, slot)
	sliSlot := sliceChild(sliceChild(lookupSlice(sli:chars), who), slot)

	if (fromBag) then (
		if (sli) then (
			setParent(sli, lookupSlice(sli:pinbag))
		)
		sliBagPin := sliceChild(lookupSlice(sli:pinbag), bagSlotID)
		if (sliBagPin) then (
			setParent(sliBagPin, sliSlot)
			return (true)
		) else (return (false))
	) else  if (sli == false) then (
		sli := initPin(bagSlotID, lvl)
		setParent(sli, sliSlot)
		return (true)
	) else (return (false))
end

script, initPin, id, lvl, begin
	variable(sli)
	sli := createContainer()

	setExtra(sli, pin:ID, id)
	setExtra(sli, pin:exp, lvl ^ 2)
	setExtra(sli, pin:lvl, lvl)

	resizeExtra(sli, 16)
	return(sli)
end

script, addPinExpCapped, who, slot, amount, begin
	variable (sli, lvl)
	lvl := expCurve(getPinExp(who, slot))
	if (getPinCap(lvl)==false) then (
		addPinExp(who, slot, amount)
	)
end

script, getPinCap, lvl, begin
	if (lvl > game:lvlCap) then (return(true))
end

script, initPinSlots, who, begin
	variable(sli, i)
	for (i, 0, slot:atr) do (
		sli := createContainer(), 
		setParent(sli, sliceChild (lookupSlice(sli:Chars), who))
	)
end

script, lvlPin, who, slot, begin
	variable(exp, lvl, origLvl)

	#get level to check for levelup later
	origLvl := getpinLvl(who, slot)
	exp := getPinExp(who, slot)

	#this is where the level curve is determined
	lvl := expCurve(exp)

	#if (lvl >= game:lvlCap * 3) then (lvl := game:lvlCap * 3)

	setPinLvl(who, slot, lvl)

	#return true if leveled up
	if (origLvl<>lvl) then (return (true))
end

script, expCurve, exp, begin
 	variable (lvl)
 	lvl := sqrt(exp)
 	return (lvl)
end

script, addPinExp, who, slot, value, begin
	variable (sli)
	setPinExp (who, slot, getPinExp(who, slot) + value)
end

script, setPinExp, who, slot, value, begin
	variable (sli)
	sli :=	returnPinSlice(who, slot)
	if (sli) then (return (setExtra(sli, pin:Exp, value)))
end

script, getPinExp, who, slot, begin
	variable (sli)
	sli :=	returnPinSlice(who, slot)
	if (sli) then (return (getExtra(sli, pin:exp)))
end

script, getPinLvl, who, slot, begin
	variable (sli)
	sli :=	returnPinSlice(who, slot)
	if (sli) then (return (getExtra(sli, pin:lvl)))
end

script, setPinLvl, who, slot, value, begin
	variable (sli)
	sli :=	returnPinSlice(who, slot)
	if (sli) then (return (setExtra(sli, pin:lvl, value)))
end

script, getPinId, who, slot, begin
	variable (sli)
	sli :=	returnPinSlice(who, slot)
	if (sli) then (return (getExtra(sli, pin:ID))) else (return (pin:dummy))
end

script, getPinName, which, begin
	switch (which) do (
		case (pin:heart) do ($11="Heart")
		case (pin:calm) do ($11="Calm")
		case (pin:read) do ($11="Read")
		case (pin:flame) do ($11="Flame")
		case (pin:water) do ($11="Water")
		case (pin:shock) do ($11="Shock")
		case (pin:earth) do ($11="Earth")

		case (pin:life) do ($11="Life+")
		case (pin:mind) do ($11="Mind+")
		case (pin:psi) do ($11="Psi+")
		case (pin:speed) do ($11="Speed+")
		case (pin:empathy) do ($11="Empathy+")

		case (pin:flameAtr) do ($11="Flame Atr")
		case (pin:waterAtr) do ($11="Water Atr")
		case (pin:shockAtr) do ($11="Shock Atr")
		case (pin:earthAtr) do ($11="Earth Atr")

		case (pin:addFlame) do ($11="+Flame")
		case (pin:addWater) do ($11="+Water")
		case (pin:addShock) do ($11="+Shock")
		case (pin:addEarth) do ($11="+Earth")
		case (pin:dummy) do ($11="Empty")
	)
end

script, returnPinSlice, who, slot, begin
	variable(sli)
	sli :=	firstChild(sliceChild(sliceChild(lookupSlice(sli:chars), who), slot))
	return (sli)
end

#caculate attack damage using attacker, attack, and target
# *brian explodes*
script, usePin, attacker, target, slot, begin
	variable (atr, psi, mind, sli, effect, pin, lvl, hp, def)

	pin := getPinId(attacker, slot)
	lvl := getPinLvl(attacker, slot)

	psi := getStat(attacker, stat:psi)
	mind := getStat(target, stat:mind)
	def := getStat(target, stat:defending)
	$10="what the fuck"
	if (pin >= pin:flame && pin <= pin:earth) then (
		effect := getPinEffect(pin, lvl, psi, mind)

		#*1.25 if attacking with atribute of pin
		atr := getStat(attacker, stat:atr)
		if (atr + 1 -- pin:addFlame == pin) then (effect := effect + effect/4)

		#if weak, damage*1.25 ; if strong, damage*0.75
		if (elementCheck(pin, target) == weak) then (
			effect += effect / 4
		) else if (elementCheck(pin, target) == strong) then (
			effect -= effect / 4
		)
		if (def) then (
			effect -= effect / 4
		)
		$10="They took "
		appendNumber(10, effect)
		$10+" damage"
		hp := getStat(target, stat:currentLife) -- effect
		if (hp < 0) then (hp := 0)
		setStat(target, stat:currentlife, hp)
		statGain(attacker, gain:attack, slot)
		statGain(target, gain:damage)


	) else if (pin == pin:heart) then (
		heal (target)
		statGain(attacker, gain:attack)
	) else if (pin >= pin:addFlame && pin <= pin:addEarth) then (
		setStat(target, stat:atr, pin + 1 -- pin:addFlame)
		statGain(attacker, gain:attack, slot)
		getPinName(pin--4)
		$10="They gained the ${S11}"
	)

	subscript, heal, who, begin
		hp := getStat(who, stat:currentlife)
		effect := getPinEffect (pin, lvl, psi,	hp)
		hp += effect
		if (hp > getStat(who, stat:life)) then (hp := getStat(who, stat:life))
		$10="Health restored to "
		appendNumber(10, hp)

		setStat(who, stat:currentlife, hp)
	end
end

script, getPinEffect, id, lvl, mod1, mod2=1, begin
	variable (value)
	switch (id) do (
		#mod1 is psi
		case (pin:heart) do (
			value := (lvl / 2 + mod1 + mod2 / 4) / 3
		)
		#mod1 is empathy, mod2 is will
		case (pin:calm, pin:read) do (
			value := lvl * 3 / 4 + mod1 / 2 -- mod2 / 2 + random (-20, 20)
		)
		#mod1 is psi, mod2 is mind
		case (pin:flame, pin:water, pin:shock, pin:earth) do (
			value := (lvl * 3 / 4 + mod1 * 3 / 4) -- mod2 / 4
		)
		#mod1 is original stat value
		case (pin:life, pin:mind, pin:psi, pin:speed, pin:empathy) do (
			value := lvl * mod1 / 10
			value := value * value / 100
		)
	)
	return (value)
end

#math go brr
script, elementCheck, pin, target, begin
	variable (modded, atr)

	atr := getStat(target, stat:atr)

	if (atr == pin:dummy) then (exitScript)

	pin := pin -- 5
	atr := atr -- 14

	#make it 4 into a 0 for math reasons.
	modded := pin, mod, 4
	if (modded  -- atr == 1) then (
		return (weak)
	)

	#make it 4 into a 0 for math reasons.
	modded := atr, mod, 4
	if (pin -- modded == -1) then (
		return (strong)
	)
end